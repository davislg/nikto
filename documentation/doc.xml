<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY description SYSTEM "sections/description.xml">
<!ENTITY options SYSTEM "sections/options.xml">
]>
<book>
  <!--Version 1.1-->

  <title>Nikto v2.1.0 / The Manual</title>

  <chapter>
    <title>Introduction</title>

    <sect1>
      <title>Overview</title>

      <para>Nikto is a web server assessment tool. It is designed to find
      various default and insecure files, configurations and programs on any
      type of web server.</para>
    </sect1>

    <sect1>
      <title>Description</title>

      &description;

      <para>The name "Nikto" is taken from the movie "The Day the Earth Stood
      Still", and of course subsequent abuse by Bruce Campbell in "Army of
      Darkness". More information on the pop-culture popularity of Nikto can
      be found at
      http://www.blather.net/blather/2005/10/klaatu_barada_nikto_the_day_th.html</para>
    </sect1>

    <sect1>
      <title>Advanced Error Detection Logic</title>

      <para>Most web security tools, (including Nikto 1.32 and below), rely
      heavily on the HTTP response to determine if a page or script exists on
      the target. Because many servers do not properly adhere to RFC standards
      and return a 200 "OK" response for requests which are not found or
      forbidden, this can lead to many false-positives. In addition, error
      responses for various file extensions can differ--the "not found"
      response for a .html file is often different than a .cgi.</para>

      

      <para>Some testing tools, such as Nessus, also look at the content of
      the response to help eliminate these false positives. While often
      effective, this method relies on pre-defined strings to help eliminate
      false positives.</para>

      

      <para>As of version 2.0 Nikto no longer assumes the error pages for
      different file types will be the same. A list of unique file extensions
      is generated at run-time (from the test database), and each of those
      extensions is tested against the target. For every file type, the "best
      method" of determining errors is found: standard RFC response, content
      match or MD4 hash (in decreasing order of preference). This allows Nikto
      to use the fastest and most accurate method for each individual file
      type, and therefore help eliminate the false positives seen for some
      servers in version 1.32 and below.</para>

      

      <para>For example, if a server responds with a 404 "not found" error for
      a non-existent .txt file, Nikto will match the HTTP response of "404" on
      tests. If the server responds with a 200 "OK" response, it will try to
      match on the content, and assuming it finds a match (for example, the
      words "could not be found"), it will use this method for determining
      missing .txt files. If the other methods fail, Nikto will attempt to
      remove date and time strings (which can constantly change) from the
      returned page's content, generate an MD5 hash of the content, and then
      match that hash value against future .txt tests. The latter is by far
      the slowest type of match, but in many cases will provide valid results
      for a particular file type.</para>
    </sect1>

    <sect1>
      <title>History</title>

      <para>The Nikto 1.00 Beta was released on December 27, 2001, (followed
      almost immediately by the 1.01 release). Over the course of two years
      Nikto's code evolved into the most popular freely available web
      vulnerability scanner. The 2.0 release, in November, 2007 represents
      several years of improvements.</para>

      
    </sect1>
  </chapter>

  <chapter>
    <title>Installation</title>

    <sect1>
      <title>Requirements</title>

      <para>Any system which supports a basic PERL installation should allow
      Nikto to run. It has been extensively tested on:</para>

      <itemizedlist>
        <listitem>
          <para>Windows (using ActiveState Perl)</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Mac OSX</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Various Linux and Unix installations (including RedHat,
          Solaris, Debian, Knoppix, etc.)</para>
        </listitem>
      </itemizedlist>

      <para>The only required PERL module that does not come standard is
      LibWhisker. Nikto comes with and is configured to use a local LW.pm file
      (in the plugins directory), but users may wish to change Nikto to use a
      version installed on the system. See Section 2 for further
      information.</para>

      <para>For SSL support the Net::SSLeay PERL module must be installed
      (which in turn requires OpenSSL on the Unix platform). Windows support
      for SSL is dependent on the installation package, but is rumored to
      exist for ActiveState's Perl.</para>

      <para>The nmap scanner can also be used, if desired. In some cases using
      nmap will slow down Nikto execution, as it must call an external
      program. For scanning many ports across one or more servers, using nmap
      will be faster than using Nikto's internal PERL scanning.</para>

      <para><itemizedlist>
          <listitem>
            <para>PERL: <ulink
            url="http://www.cpan.org/">http://www.cpan.org/</ulink></para>
          </listitem>

          <listitem>
            <para>LibWhisker: <ulink
            url="http://www.wiretrip.net/">http://www.wiretrip.net/</ulink></para>
          </listitem>

          <listitem>
            <para>ActiveState Perl: <ulink
            url="http://www.activestate.com/">http://www.activestate.com/</ulink></para>
          </listitem>

          <listitem>
            <para>OpenSSL: <ulink
            url="http://www.openssl.org/">http://www.openssl.org/</ulink></para>
          </listitem>

          <listitem>
            <para>nmap: <ulink
            url="http://www.insecure.org/">http://insecure.org/</ulink></para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>Install</title>

      <para>These instructions do not include information on installing PERL,
      PERL Modules, OpenSSL, LibWhisker or any of the utilities that may be
      needed during installation (such as gzip, tar, etc.). Please see the
      distributor's documentation for information on how to install and
      configure those software packages.</para>

      <para>Unpack the download file:</para>

      <blockquote>
        <para>tar -xvfz nikto-current.tar.gz</para>
      </blockquote>

      <para>Assuming a standard OS/PERL installation, Nikto should now be
      usable. See Chapter 4 (Options) or Chapter 8 (Troubleshooting) for
      further configuration information.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Usage</title>

    <sect1>
      <title>Basic Testing</title>

      <para>The most basic Nikto scan requires simply a host to target, since
      port 80 is assumed if none is specified. The host can either be an IP or
      a hostname of a machine, and is specified using the -h (-host) option.
      This will scan the IP 192.168.0.1 on TCP port 80:</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1</para>
      </blockquote>

      <para>To check on a different port, specify the port number with the -p
      (-port) option. This will scan the IP 192.168.0.1 on TCP port
      443:</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1 -p 443</para>
      </blockquote>

      <para>Hosts, ports and protocols may also be specified by using a full
      URL syntax, and it will be scanned:</para>

      <blockquote>
        <para>perl nikto.pl -h https://192.168.0.1:443/</para>
      </blockquote>

      <para>There is no need to specify that port 443 may be SSL, as Nikto
      will first test regular HTTP and if that fails, HTTPS. If you are sure
      it is an SSL server, specifying -s (-ssl) will speed up the test.</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1 -p 443 -ssl</para>
      </blockquote>
    </sect1>

    <sect1>
      <title>Multiple Port Testing</title>

      <para>Nikto can scan multiple ports in the same scanning session. To
      test more than one port on the same host, specify the list of ports in
      the -p (-port) option. Ports can be specified as a range (i.e., 80-90),
      or as a comma-delimited list, (i.e., 80,88,90). This will scan the host
      on ports 80, 88 and 443.</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1 -p 80,88,443</para>
      </blockquote>
    </sect1>

    <sect1>
      <title>Multiple Host Testing</title>

      <para>Nikto support scanning multiple hosts in the same session via a
      text file of host names or IPs. Instead of giving a host name or IP for
      the -h (-host) option, a file name can be given. A file of hosts must be
      formatted as one host per line, with the port number(s) at the end of
      each line. Ports can be separated from the host and other ports via a
      colon or a comma. If no port is specified, port 80 is assumed.</para>

      <para>This is an example of a valid hosts file:</para>

      <blockquote>
        <para>192.168.0.1:80</para>

        <para>192.168.0.2,80</para>

        <para>192.168.0.3</para>

        <para>192.168.0.1,80,443</para>

        <para>192.168.0.1:80:443</para>

        <para>localhost:8888</para>
      </blockquote>
      
      <para>A host file may also be an nmap output in "greppable" format (i.e.
      from -oG). This may be passed to nikto through stdout/stdin using a "-" as
      the filename. For example:</para>
      
      <blockquote>
         <para>nmap -p80 192.168.0.0/24 -oG - | nikto.pl -h -</para>
      </blockquote>
      
      <para>Important note for win32 users: due to peculiaries in the way that cmd.exe
      works with pipes, the above example may not work for you. In this case you'll
      have to use a temporary file to store the output from nmap.</para>
    </sect1>

    <sect1>
      <title>Using a Proxy</title>

      <para>If the machine running Nikto only has access to the target host
      (or update server) via an HTTP proxy, the test can still be performed.
      Set the PROXY* variables (as described in section 4), then execute Nikto
      with the -u (-useproxy) command. All connections will be relayed through
      the HTTP proxy specified in the configuration file.</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1 -p 80 -u</para>
      </blockquote>
    </sect1>

    <sect1>
      <title>Updating</title>

      <para>Nikto can be automatically updated, assuming you have Internet
      connectivity from the host Nikto is installed on. To update to the
      latest plugins and databases, simply run Nikto with the -update
      command.</para>

      <blockquote>
        <para>perl nikto.pl -update</para>
      </blockquote>

      <note>
        <para>The -update option cannot be abbreviated.</para>
      </note>

      <para>If updates are required, you will see a list of the files
      downloaded:</para>

      <blockquote>
        <para>perl nikto.pl -update</para>

        <para>+ Retrieving 'nikto_core.plugin'</para>

        <para>+ Retrieving 'CHANGES.txt'</para>
      </blockquote>

      <para>Updates may also be manually downloaded from <ulink
      url="http://www.cirt.net/">http://www.cirt.net/</ulink></para>
    </sect1>

    <sect1>
      <title>Integration with Nessus</title>

      <para>Nessus (<ulink
      url="http://www.nessus.org/">http://www.nessus.org/nessus/</ulink>) can
      be configured to automatically launch Nikto when it finds a web server.
      Ensure Nikto works properly, then place the directory containing
      nikto.pl in root's PATH environment variable. When nessusd starts, it
      should see the nikto.pl program and enable usage through the GUI.</para>

      
    </sect1>
  </chapter>

  <chapter>
    <title>All Options</title>
    &options;
  </chapter>

  <chapter>
    <title>Detailed Options</title>

    <sect1>
      <title>Mutation Techniques</title>

      <para>A mutation will cause Nikto to combine tests or attempt to guess
      values. These techniques may cause a tremendous amount of tests to be
      launched against the target. Use the reference number to specify the
      type, multiple may be combined.</para>

      <para>1 - Test all files with all root directories. This takes each test
      and splits it into a list of files and directories. A scan list is then
      created by combining each file with each directory.</para>

      <para>2 - Guess for password file names. Takes a list of common password
      file names (such as "passwd", "pass", "password") and file extensions
      ("txt", "pwd", "bak", etc.) and builds a list of files to check
      for.</para>

      <para>3 - Enumerate user names via Apache (/~user type requests).
      Exploit a misconfiguration with Apache UserDir setups which allows valid
      user names to be discovered. This will attempt to brute-force guess user
      names. A file of known users can also be supplied by supplying the file
      name in the -mutate-options parameter.</para>

      <para>4 - Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type
      requests). Exploit a flaw in cgiwrap which allows valid user names to be
      discovered. This will attempt to brute-force guess user names.A file of
      known users can also be supplied by supplying the file name in the
      -mutate-options parameter.</para>
      
      <para>5 - Attempt to brute force sub-domain names. This will attempt to
      brute force know domain names, it will assume the the given host (without
      a www) is the parent domain.</para>
      
      <para>6 - Attempt to brute directory names. This is the only mutate
      option that requires a file to be passed. It will use the given file to
      attempt to guess directory names. Lists of common directories may be
      found in the OWASP DirBuster project.</para>  
    </sect1>

    <sect1>
      <title>Display</title>

      <para>The Display option</para>

      <para>1 - Show redirects. This will display all requests which elicit a
      "redirect" response from the server.</para>

      <para>2 - Show cookies received. This will display all cookies that were
      sent by the remote host.</para>

      <para>3 - Show all 200/OK responses. This will show all responses which
      elicit an "okay" (200) response from the server. This could be useful
      for debugging.</para>

      <para>4 - Show URLs which require authentication. This will show all
      responses which elicit an "authorization required" header.</para>

      <para>D - Debug Output. Show debug output, which shows the verbose
      output and extra information such as variable content.</para>

      <para>V - Verbose Output. Show verbose output, which typically shows
      where Nikto is during program execution.</para>
    </sect1>

    <sect1>
      <title>Scan Tuning</title>

      <para>Scan tuning can be used to decrease the number of tests performed
      against a target. By specifying the type of test to include or exclude,
      faster, focused testing can be completed. This is useful in situations
      where the presence of certain file types are undesired--such as XSS or
      simply "interesting" files.</para>

      

      <para>Test types can be controlled at an individual level by specifying
      their identifier to the -T (-Tuning) option. In the default mode, if -T
      is invoked only the test type(s) specified will be executed. For
      example, only the tests for "Remote file retrieval" and "Command
      execution" can performed against the target:<blockquote>
          <para>perl nikto.pl -h 192.168.0.1 -T 58</para>
        </blockquote></para>

      <para>If an "x" is passed to -T then this will negate all tests of types
      following the x. This is useful where a test may check several different
      types of exploit. For example:</para>

      <blockquote>
        <para>perl nikto.pl -h 192.168.0.1 -T 58xb</para>
      </blockquote>

      <para>The valid tuning options are:</para>

      <para>0 - File Upload. Exploits which allow a file to be uploaded to the
      target server.</para>

      <para>1 - Interesting File / Seen in logs. An unknown but suspicious
      file or attack that has been seen in web server logs (note: if you have
      information regarding any of these attacks, please contact CIRT,
      Inc.).</para>

      <para>2 - Misconfiguration / Default File. Default files or files which
      have been misconfigured in some manner. This could be documentation, or
      a resource which should be password protected.</para>

      <para>3 - Information Disclosure. A resource which reveals information
      about the target. This could be a file system path or account
      name.</para>

      <para>4 - Injection (XSS/Script/HTML). Any manner of injection,
      including cross site scripting (XSS) or content (HTML). This does not
      include command injection.</para>

      <para>5 - Remote File Retrieval - Inside Web Root. Resource allows
      remote users to retrieve unauthorized files from within the web server's
      root directory.</para>

      <para>6 - Denial of Service. Resource allows a denial of service against
      the target application, web server or host (note: no intention DoS
      attacks are attempted).</para>

      <para>7 - Remote File Retrieval - Server Wide. Resource allows remote
      users to retrieve unauthorized files from anywhere on the target.</para>

      <para>8 - Command Execution / Remote Shell. Resource allows the user to
      execute a system command or spawn a remote shell.</para>

      <para>9 - SQL Injection. Any type of attack which allows SQL to be
      executed against a database.</para>

      <para>a - Authentication Bypass. Allows client to access a resource it
      should not be allowed to access.</para>

      <para>b - Software Identification. Installed software or program could
      be positively identified.</para>

      <para>c - Remote source inclusion. Software allows remote inclusion of
      source code.</para>

      <para>x - Reverse Tuning Options. Perform exclusion of the specified
      tuning type instead of inclusion of the specified tuning type.</para>
    </sect1>

    <sect1>
      <title>Single Request Mode</title>

      <para>Single request mode is designed to preform a solitary request
      against the target. This is useful to confirm a test result using the
      same resources Nikto used during a scan. The single option allows manual
      setting of most variables used by Nikto and LibWhisker, and upon
      completion will display both the request and the result of the
      operation.</para>

      <para>Most options have a default value or can be left blank. The most
      common and required values are at the beginning of the "questions"
      section for slightly easier use. True and false are specified by numeric
      equivalents, 1 and 0 respectively. Please note that Single mode is not
      very user-friendly. Here is an example Nikto run with the -Single
      option.</para>
    </sect1>
  </chapter>
  
  <chapter>
     <title>Configuration Files</title>
     
     <sect1>
        <title>Location</title>
        <para>Nikto, like any non-trivial program needs to know a few things
        about how to work with the current environment. For most situations the
        default configuration file will work. Sometimes, tuning may be required,
        or some things may need to be changes.</para>
     
        <para>Nikto will look for a configuration file in three places and if it
        finds one, will apply it in the strict order, listed below. A later found
        configuration file will overwrite any variables set in an earlier
        configuration file. The locations are:</para>
     
        <orderedlist>
           <listitem>
              <para>/etc/nikto.conf (this may be altered depending on
                    platform)</para>
           </listitem>
           <listitem>
              <para>$HOME/nikto.conf</para>
           </listitem>
           <listitem>
              <para>nikto.conf</para>
           </listitem>
        </orderedlist>
     </sect1>
     
     <sect1>
        <title>Format</title>
        <para>The configuration files are formated like a standard Unix
        configuration file: blank lines are ignored, any line starting with a #
        is ignored, variables are set with VariableName=Value line.</para>
     </sect1>
     
     <sect1>
        <title>Variables</title>
        <para>The following variables may be set within the configuration
        file:</para>
        
        <variablelist>
           <varlistentry>
              <term>CLIOPTS</term>
              <listitem>
                 <para>Default options that should always be passed to the command line.
                 For example:</para>
                 <blockquote>
                    <para><command>CLIOPTS=-output results.txt -Format text</command></para>
                 </blockquote>
                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>CLIOPTS=</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term><command>NIKTODTD</command></term>
              <listitem>
                 <para>Path to the location of the DTD used for XML output. If the
                 path is not absolute then it will be relative to the directory where
                 Nikto is executed.</para>
                 
                 <para>Default Setting</para>
                 <blockquote>
                    <para>NIKTODTD=docs/nikto.dtd</para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>NMAP</term>
              <term>NMAPOPTS</term>
              <listitem>
                 <para><emphasis>Deprecated</emphasis></para>
                 <para>Location of nmap and default nmap options. Nikto used to use 
                 nmap to aid in checking for valid HTTP ports on any targets. From
                 Nikto 2.10, nmap is no longer used from within Nikto and this variable
                 will do nothing. This option may be removed in a later version.</para>
                 
                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>NMAP=/usr/local/bin/nmap</command></para>
                    <para><command>NMPOPTS=-P0</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>SKIPPORTS</term>
              <listitem>
                 <para><emphasis>Deprecated</emphasis></para>
                 <para>This configuration item originally defined ports that would never
                 be scanned by Nikto. This is currently unused and deprecated.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>SKIPPORTS=21 111</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>SKIPIDS</term>
              <listitem>
                 <para>Contains a space separated list of Test IDs (tids) that Nikto will
                 not run on the system, for example:</para>
                 <blockquote>
                    <para><command>SKIPIDS=000045 000345</command></para>
                 </blockquote>
                 <para>Note, this filter only applies to tests in the db_tests database</para>
                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>SKIPIDS=</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>DEFAULTHTTPVER</term>
              <listitem>
                 <para>Defines the default version of HTTP that Nikto will use, unless
                 superceded by a specific test. Usually keeping this to the default will
                 suffice, though some web servers may only work with later versions of the
                 HTTP protocol.</para>
                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>DEFAULTHTTPVER=1.0</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>UPDATES</term>
              <listitem>
                 <para>If the outdated Nikto plugin sees a web server it doesn't know of,
                 or a version that is later than that defined in db_outdated, then it will
                 send this information back to cirt.net for inclusion in future versions of
                 Nikto. Server specific information (e.g. IP addresses or hostnames) are not
                 sent.</para>

                 <para>This item can be set to one of the below values:</para>
                 <blockquote>
                    <variablelist>
                       <varlistentry>
                          <term><command>UPDATES=yes</command></term>
                          <listitem>
                             <para>Display each submission and ask for permission before it is sent</para>
                          </listitem>
                       </varlistentry>
                       <varlistentry>
                          <term><command>UPDATES=no</command></term>
                          <listitem>
                             <para>Do not send any data back to cirt.net</para>
                          </listitem>
                       </varlistentry>
                       <varlistentry>
                          <term><command>UPDATES=auto</command></term>
                          <listitem>
                             <para>Send data back to cirt.net with no prompting</para>
                          </listitem>
                       </varlistentry>
                    </variablelist>
                 </blockquote>
                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>UPDATES=yes</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>MAX_WARN</term>
              <listitem>
                 <para><emphasis>Unused</emphasis></para>
                 <para>Produces a warning of a number of MOVED responses are retrieved. This
                 is currently unused.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>MAX_WARN=20</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>PROMPTS</term>
              <listitem>
                 <para><emphasis>Deprecated</emphasis></para>
                 <para>Disables Nikto prompts if set to "no". This is currently unused and
                 has been deprecated by the UPDATES item.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>PROMPTS=</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>CIRT</term>
              <listitem>
                 <para>The IP address that Nikto will use to update the databases and
                 plugins, or will send version information back to (as described in the
                 UPDATES item).</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>CIRT=209.172.49.178</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>PROXYHOST</term>
              <term>PROXYPORT</term>
              <term>PROXYUSER</term>
              <term>PROXYPASS</term>
              <listitem>
                 <para>Address, port and username password of a proxy to relay all
                 requests through. Note, to use a proxy, you must set the configuration
                 items in the configuration file and supply the -useproxy switch to
                 the command line.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>PROXYHOST=</command></para>
                    <para><command>PROXYPORT=</command></para>
                    <para><command>PROXYUSER=</command></para>
                    <para><command>PROXYPASS=</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>STATIC-COOKIE</term>
              <listitem>
                 <para>Adds the supplied cookie to all requests made via Nikto, this
                 is generally useful is an authentication cookie is required for a
                 website. For example:</para>
                 <blockquote>
                    <para><command>STATIC-COOKIE=userid=0</command></para>
                 </blockquote>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>STATIC-COOKIE=</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>CHECKMETHODS</term>
              <listitem>
                 <para>Nikto will attempt to identify targets as webservers by sending
                 a request to fetch the / URI via certain HTTP methods. Some web
                 servers do not implement all HTTP methods and may cause Nikto to fail
                 to identify the web server correctly if it doesn't support the method
                 being used.</para>

                 <para>If this setting is missing from the configuration file, then
                 Nikto will default back to the Nikto 2.02 default of HEAD.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>CHECKMETHODS=HEAD GET</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
           <varlistentry>
              <term>EXECDIR</term>
              <term>PLUGINDIR</term>
              <term>TEMPLATEDIR</term>
              <term>DOCDIR</term>
              <listitem>
                 <para>Defines where to find the location of Nikto, its plugins,
                 XML/HTML templates and documents. This should only normally be
                 changed if repackaging Nikto to work with different file system
                 standards. Nikto will use the EXECDIR item to guess the other
                 directories.</para>

                 <para>Default Setting</para>
                 <blockquote>
                    <para><command>EXECDIR=.</command></para>
                    <para><command>PLUGINDIR=EXECDIR/plugins</command></para>
                    <para><command>TEMPLATEDIR=EXECDIR/templates</command></para>
                    <para><command>DOCDIR=EXECDIR/docs</command></para>
                 </blockquote>
              </listitem>
           </varlistentry>
        </variablelist>
      </sect1>
   </chapter>           

  <chapter>
    <title>Output and Reports</title>

    <sect1>
      <title>Export Formats</title>

      <para>Nikto saved output comes in four flavours: text, CSV, XML or HTML.
      When using -o (output), an output format may be specified with -F (Format).
      Text format is assumed if nothing is specified with -F. The DTD for the
      Nikto XML format can be found in the 'docs' directory
      (nikto.dtd).</para>
    </sect1>

    <sect1>
      <title>HTML Customisation</title>

      <para>HTML reports are generated from template files located in the
      "templates" directory. Variables are defined as #variable-name, and are
      replaced when the report is generated. The files "htm_start.tmpl" and
      "htm_end.tmpl" are included at the beginning and end of the report
      (respectively). The "htm_summary.tmpl" also appears at the beginning of
      the report. The "htm_host_head" appears once for every host, and the
      "htm_host_item.tmpl" and "htm_host_im.tmpl" appear once for each item
      found on a host and each "informational message" per host
      (respectively).</para>

      

      <para>All valid variables are used in these templates. Future versions
      of this documentation will include a list of variables and their
      meaning.</para>

      

      <para>The copyright statements must not be removed from the
      "htm_end.tmpl" without placing them in another of the templates. It is a
      violation of the Nikto licence to remove these notices.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Test &amp; Code Writing</title>

    <sect1>
      <title>Scan Database Field Values</title>

      <para>Though some checks can be found in other plugins, the
      scan_database.db contains the bulk of the web test information. Here is
      a description of the field values:</para>

      

      <informaltable>
          <tgroup cols="2">
            <tbody>
              <row>
                <entry>Test ID</entry>

                <entry>Nikto test ID</entry>
              </row>

              <row>
                <entry>OSVDB-ID</entry>

                <entry>Corresponding vulnerability entry number for
                osvdb.org</entry>
              </row>

              <row>
                <entry>Server Type</entry>

                <entry>Generic server matching type</entry>
              </row>

              <row>
                <entry>URI</entry>

                <entry>URI to retrieve</entry>
              </row>

              <row>
                <entry>HTTP Method</entry>

                <entry>HTTP method to use for URI</entry>
              </row>

              <row>
                <entry>Match 1</entry>

                <entry>String or code to match for successful test</entry>
              </row>

              <row>
                <entry>Match 1 (Or)</entry>

                <entry>String or code to alternatively match for successful
                test</entry>
              </row>

              <row>
                <entry>Match1 (And)</entry>

                <entry>String or code to also match for successful
                test</entry>
              </row>

              <row>
                <entry>Fail 1</entry>

                <entry>String or code to match for test failure</entry>
              </row>

              <row>
                <entry>Fail 2</entry>

                <entry>String or code to match for test failure
                (alternative)</entry>
              </row>

              <row>
                <entry>Summary</entry>

                <entry>Summary message to report for successful test</entry>
              </row>

              <row>
                <entry>HTTP Data</entry>

                <entry>HTTP data to be sent during POST tests</entry>
              </row>

              <row>
                <entry>Headers</entry>

                <entry>Additional headers to send during test</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
    </sect1>

    <sect1>
      <title>User-Defined Tests</title>

      <para>Users can create their own, private tests for any of the
      databases. By placing a syntactically correct database file in the
      "plugins" directory, with a file name prefaced with a "u", the data will
      be loaded along with the built-in checks.</para>

      

      <para>For example, create the file "plugins/udb_outdated" and it will be
      loaded at the same time "plugins/db_outdated" is loaded. These files
      will also be checked for syntax when -dbcheck is used.</para>

      

      <para>For tests which require a "private" OSVDB ID, use the OSVDB ID 0
      (zero). This should be used for all vulnerabilities that do not (or
      should not) exist in OSVDB, as ID 0 is for testing only. You are
      encouraged to send missing information to OSVDB at
      moderators@osvdb.org.</para>

      

      <para>For the "Test ID", it is recommended you use unique numbers
      between 400000 and 499999 to allow for growth of the Nikto database
      without interfering with your own tests (note: numbers above 500000 are
      reserved for other tests).</para>

      

      <para>Please help Nikto's continued success by sending test updates to
      sullo@cirt.net.</para>
    </sect1>

    <sect1>
      <title>Scan Database Syntax</title>

      <para>The scan database is a CSV delimited file which contains most of
      the tests. Fields are enclosed by quotes and separated by commas. The
      field order is:</para>

      <para>Test-ID, OSVDB-ID, Tuning Type, URI, HTTP Method, Match 1, Match 1
      Or, Match1 And, Fail 1, Fail 2, Summary, HTTP Data, Headers</para>

      <para>Here is an example test:</para>

      <para>"120","3092","2","/manual/","GET","200","","","","","Web server
      manual","",""</para>
    </sect1>

    <sect1>
      <title>Plugins</title>

      <para>Plugins are standard PERL which follow a standard Nikto naming
      format. All plugins must be named in the pattern nikto_name.plugin,
      where "name" is the name of the plugin. The file must have a subroutine
      named the same as the file name without the ".plugin" extension. For
      example, a plugin named nikto_mycode.plugin would need a subroutine
      called "sub nikto_mycode()", which would be executed when called.</para>

      

      <para>All plugins must also be placed in the nikto_plugin_order.txt file
      in the proper location for execution, otherwise it will not be
      called.</para>

      

      <para>See the section "Test Identifiers" for how to select and create a
      unique identifier for any test written in code, and how to ensure the
      test result is stored in saved output.</para>
    </sect1>

    <sect1>
      <title>Test Identifiers</title>

      <para>Each test, whether it comes from one of the databases or in code,
      must have a unique identifier. The numbering scheme for writing tests is
      as follows:</para>

      <para>000000 db_tests</para>

      <para>400000 user defined tests (udb* files)</para>

      <para>500000 db_favicon</para>

      <para>600000 db_outdated</para>

      <para>700000 db_realms</para>

      <para>800000 db_server_msgs</para>

      <para>900000 tests defined in code</para>

      <para>As much data as possible in the %TESTS hash should be populated
      for each new test that is defined in code (plugins). These fields
      include URI for the test, message to print on success, HTTP method and
      OSVDB ID. Without a 'message' value in %TESTS output will not be saved
      in HTML or XML reports. Not all tests are expected to have a uri, method
      or OSVDB ID. Here is an example of setting those fields:</para>

      <para>$TESTS{999999}{uri}="/~root";</para>

      <para>$TESTS{999999}{message}="Enumeration of users is possible by
      requesting ~username";</para>

      <para>$TESTS{999999}{method}="GET";</para>

      <para>$TESTS{999999}{osvdb}=637;</para>
    </sect1>

    <sect1>
      <title>Code Copyrights</title>

      <para>Any new or updated code, tests or information sent to the author
      is assumed to free of copyrights. By sending new or updated code, tests
      or information to the author you relinquish all claims of copyright on
      the material, and agree that this code can be claimed under the same
      copyright as Nikto.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Troubleshooting</title>

    <sect1>
      <title>SOCKS Proxies</title>

      <para>Nikto does not currently support SOCKS proxies.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Licenses</title>

    <sect1>
      <title>Nikto</title>

      <para>Nikto is licensed under the GNU General Public License (GPL), and
      copyrighted by CIRT, Inc.</para>
    </sect1>

    <sect1>
      <title>LibWhisker</title>

      <para>LibWhisker is licensed under the GNU General Public License (GPL),
      and copyrighted by Rain Forrest Puppy.</para>
    </sect1>

    <sect1>
      <title>Tests</title>

      <para>The web tests are licensed for use with Nikto only, and may not be
      reused without written consent from CIRT, Inc.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Credits</title>

    <sect1>
      <title>Nikto</title>

      <para>Nikto is written and maintained by Sullo, CIRT, Inc. All code is ©
      CIRT, Inc., except LibWhisker which is © rfp.labs (wiretrip.net). Other
      portions of code may be © as specified.</para>
    </sect1>

    <sect1>
      <title>Thanks</title>

      <para>Many people have provided feedback, fixes, and suggestions. This
      list attempts to make note of those people, though not all contributors
      are listed. In no particular order:</para>

      <para><itemizedlist>
          <listitem>
            <para>Nikto 2 Testing: Paul Woroshow, Mark G. Spencer, Michel
            Arboi, Jericho, rfp</para>
          </listitem>

          <listitem>
            <para>Jericho (attrition.org/OSVDB/OSF).
            Support/ideas/tests/corrections/spam and help matching OSVDB IDs
            to tests.</para>
          </listitem>

          <listitem>
            <para>rfp (wiretrip.net). LibWhisker and continuing
            support.</para>
          </listitem>

          <listitem>
            <para>Erik Cabetas for many updates and fixes.</para>
          </listitem>

          <listitem>
            <para>Jake Kouns (OSVDB/OSF).</para>
          </listitem>

          <listitem>
            <para>Jabra (spl0it.org) for XML DTD, XML templates and supporting
            code.</para>
          </listitem>

          <listitem>
            <para>Stephen Valdez. Extensive testing. We all miss you.</para>
          </listitem>

          <listitem>
            <para>S Saady. Extensive testing.</para>
          </listitem>

          <listitem>
            <para>Zeno (cgisecurity.com). Nikto mirroring.</para>
          </listitem>

          <listitem>
            <para>P Eronen (nixu.com). Provided many code fixes.</para>
          </listitem>

          <listitem>
            <para>M Arboi. Great support by writing the code to make Nikto
            work within Nessus, as well as bug reports.</para>
          </listitem>

          <listitem>
            <para>T Seyrat. Maintains Nikto for the Debian releases.</para>
          </listitem>

          <listitem>
            <para>J DePriest. Ideas/fixes.</para>
          </listitem>

          <listitem>
            <para>P Woroshow. Ideas/fixes.</para>
          </listitem>

          <listitem>
            <para>fr0stman. Tests.</para>
          </listitem>

          <listitem>
            <para>H Heimann. Tests.</para>
          </listitem>

          <listitem>
            <para>Xiola (xiola.net). Web design and more.</para>
          </listitem>
        </itemizedlist></para>

      

      <para>This document is © 2008 CIRT, Inc. and may not be reused without
      permission.</para>
    </sect1>
  </chapter>
</book>
